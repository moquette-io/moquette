##############################################
#  Moquette configuration file. 
#
#  The synthax is equals to mosquitto.conf
# 
##############################################

port 1883

websocket_port 8080

#*********************************************************************
# Secure Websocket port (wss)
# decomment this to enable wss
#*********************************************************************
# secure_websocket_port 8883

#*********************************************************************
# SSL tcp part
#  ssl_provider: defines the SSL implementation to use, default to "JDK"
#            supported values are "JDK", "OPENSSL" and "OPENSSL_REFCNT"
#            By choosing one of the OpenSSL implementations the crypto
#            operations will be performed by a native Open SSL library.
#
#  jks_path: define the file that contains the Java Key Store,
#            relative to the current broker home
#
#  key_store_type: defines the key store container type, default to "jks"
#            supported values are "jceks", "jks" and "pkcs12"
#            The "jceks" and "jks" key stores are a propietary SUN
#            implementations. "pkcs12" is defined in PKCS#12 standard.
#
#  key_store_password: is the password used to open the keystore
#
#  key_manager_password: is the password used to manage the alias in the
#            keystore
#*********************************************************************
#ssl_provider JDK
#ssl_port 8883
#jks_path serverkeystore.jks
#key_store_type jks
#key_store_password passw0rdsrv
#key_manager_password passw0rdsrv

#*********************************************************************
# The interface to bind the server
#  0.0.0.0 means "any"
#*********************************************************************
host 0.0.0.0

#*********************************************************************
# If enabled store queues and subscription data into data_path
#*********************************************************************
# persistence_enabled true

#*********************************************************************
# The path to store queues and subscriptions data. Used if
# persistence_enabled is enabled.
#*********************************************************************
# data_path data/

#*********************************************************************
# Persistent queues type
#
# persistent_queue_type:
#       "h2" or "segmented"
# default: h2
#*********************************************************************
# persistent_queue_type segmented

#*********************************************************************
# acl_file:
#    defines the path to the ACL file relative to moquette home dir
#    contained in the moquette.path system property
#*********************************************************************
#acl_file config/acl.conf

#*********************************************************************
# allow_anonymous is used to accept MQTT connections also from not
# authenticated clients.
#   - false to accept ONLY client connetions with credentials.
#   - true to accept client connection without credentails, validating
#       only against the password_file, the ones that provides.
#*********************************************************************
allow_anonymous true

#*********************************************************************
# password_file:
#    defines the path to the file that contains the credentials for
#    authenticated client connection. It's relative to moquette home dir
#    defined by the system property moquette.path
#*********************************************************************
password_file config/password_file.conf


#*********************************************************************
# Optional Database Authentication
#*********************************************************************
# authenticator_class io.moquette.broker.security.DBAuthenticator
# authenticator.db.driver org.postgresql.Driver
# authenticator.db.url jdbc:postgresql://localhost/test?user=dbuser&password=dbpassword
# authenticator.db.query SELECT PASSWORD FROM ACCOUNT WHERE LOGIN=?
# authenticator.db.digest SHA-256

#*********************************************************************
# Optional
# authorizator_class:
#      class name of the authorizator, by default uses the
#      password_file.conf.
#      If not specified uses the class: AuthorizationsCollector
#
# Optional
# authenticator_class:
#      class name of the authenticator, default implementation uses
#      definitions in the acl.conf.
#      If not specified uses FileAuthenticator
# Optional
# reauthorize_subscriptions_on_connect:
#		true to force the validation of authorizations of existing
#		subscriptions when the client reconnects with not clean session
#*********************************************************************
# authenticator_class [[path to your class>]]
# authorizator_class [[path to your class>]]
# reauthorize_subscriptions_on_connect true|false


#*********************************************************************
# Persistence configuration
# autosave_interval:
#       interval between flushes of MapDB storage to disk. It's in
#       seconds, if not specified defaults is 30 s.
#*********************************************************************
# autosave_interval 120

#*********************************************************************
# Netty Configuration
#
# netty.epoll: Linux systems can use epoll instead of nio. To get a performance
# gain and reduced GC.
# http://netty.io/wiki/native-transports.html for more information
# netty.mqtt.message_size : by default the max size of message is set at 8092 bytes
# http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/errata01/os/mqtt-v3.1.1-errata01-os-complete.html#_Toc442180836
# Fore more information about payload size specs.
#
# Optional
# netty.channel_handshake_timeout.seconds:
#       The number of seconds before the SSL handshake times out. The
#       value is provided to Netty's SslHandler, and its current
#       default value is 10.
#*********************************************************************
# netty.epoll true
# netty.mqtt.message_size 8092
# netty.channel_handshake_timeout.seconds 10

#*********************************************************************
# Command session queues
#
# session_queue_size:
#         the size of each session command queue used to Session's Event loops
#*********************************************************************
# session_queue_size 1024

#*********************************************************************
# Metrics Configuration
#
# use_metrics: used to enable Dropwizard Metrics sampling metrics.
# metrics.librato.email: Librato account's email
# metrics.librato.token: Librato account's security token
# metrics.librato.source: your application as source in Librato
#       definitions
#*********************************************************************
# use_metrics true
# metrics.librato.email john@doe.com
# metrics.librato.token sdfergheghliuhyr2283ehd9827398h
# metrics.librato.source My Fantastic Service

#*********************************************************************
# Error Monitoring
#
# use_bugsnag: used to enable BugSnag error handler catcher.
# bugsnag.token: the token from your's bugsnag account
#*********************************************************************
# use_bugsnag false
# bugsnag.token wleifb8723784dbfeig74


#*********************************************************************
# Telemetry information sending
#
# telemetry_enabled:
#         true or false to select if send or not telemetry data when
#         starting up.
# default: true
#*********************************************************************
# telemetry_enabled true

#*********************************************************************
# Flush interval between writes
#
# buffer_flush_millis:
#       `immediate` or `full` or number. `immediate` forces the flush on
#       every socket write while `full` let the underlying system to flush
#       when full. If its defined a number it's used a milliseconds between flushes.
# default: immediate
#*********************************************************************
# buffer_flush_millis immediate

#*********************************************************************
# Duration after which expire persisted sessions.
#
# persistent_client_expiration:
#       This option allows the session of persistent clients (those with clean session set to false) that are not
#       currently connected to be removed if they do not reconnect within a certain time frame.
#       This is a non-standard option in MQTT v3.1. MQTT v3.1.1 and v5.0 allow brokers to remove client sessions.
#       For MQTT 5 clients that already defines the property SESSION_EXPIRY_INTERVAL during connection, this
#       value is still used as maximum available expiry interval, overriding the client's request if it's bigger.
#       The expiration period should be an integer followed by one of s m h d w M y for seconds, minutes, hours, days, weeks,
#       months and years respectively. For example: 2m or  14d or 1y
# default: infinite expiry
#*********************************************************************
# persistent_client_expiration 3d

#*********************************************************************
# Maximum QoS that the server can grant (byu default it's QoS2)
#
# max_server_granted_qos:
#       This option permit to customize the QoS that the broker can grant. By default it's QoS2 (exactly_once)
#       but in certain circumstances could be limited by the server itself.
#       Possible values are 0, 1, 2 or the extended string versions at_most_once, at_least_once, exactly_once.
# default: 2 (exactly_once)
#*********************************************************************
# max_server_granted_qos 2
